#if !defined(_HALSCAL_)
#  define _HALSCAL_

class model_data : public ad_comm{
  int sim;
  int rseed;
  data_int syr;
  data_int eyr;
  data_int nage;
  data_int nsexes;
  data_int nlbin;
  data_int nlbin2;
  data_number minbin;
  data_number stepbin;
  data_vector RVindex;
  data_matrix RVcatlen;
  data_int HSsyr;
  data_vector HSindex;
  data_matrix HSMcatlen;
  data_matrix HSFcatlen;
  data_vector LLctM;
  data_vector LLctF;
  data_vector OTct;
  data_int LLsyr;
  data_matrix LLMcatlen1;
  data_matrix LLFcatlen1;
  data_int OTsyr;
  data_matrix OTcatlen1;
  dmatrix LLMcatlen;
  dmatrix LLFcatlen;
  dmatrix OTcatlen;
  data_vector lwa;
  data_vector lwb;
  data_vector linf;
  data_vector vbk;
  data_vector t0;
  data_vector laaM;
  data_vector laaF;
  data_vector laaM_sigma;
  data_vector laaF_sigma;
  data_vector mata;
  data_vector matb;
  data_number iro;
  data_number icr;
  data_number irbar;
  data_number ifbar;
  data_number iahat;
  data_number ighat;
  data_number ifull;
  data_number iSDR;
  data_number iSDL;
  data_int eof;
  int iter;
  dvector age;
  dvector iyr;
  double mM;
  double mF;
  dvector ma;
  dvector waM;
  dvector waF;
  dvector fa;
  dmatrix pRVcatlen;
  dmatrix pHSMcatlen;
  dmatrix pHSFcatlen;
  dmatrix pOTcatlen;
  dmatrix pLLMcatlen;
  dmatrix pLLFcatlen;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_number log_ro;
  param_init_number log_cr;
  param_init_number log_rbar;
  param_init_bounded_dev_vector wt;
  param_init_number log_LLF_fbar;
  param_init_number log_LLM_fbar;
  param_init_number log_OT_fbar;
  param_init_bounded_dev_vector log_LLF_ft_dev;
  param_init_bounded_dev_vector log_LLM_ft_dev;
  param_init_bounded_dev_vector log_OT_ft_dev;
  param_init_bounded_number HSsel_half;
  param_init_bounded_number HSsel_SD;
  param_init_bounded_number RVsel_full;
  param_init_bounded_number RVsel_SDR;
  param_init_bounded_number RVsel_SDL;
  param_init_bounded_number LLsel_half;
  param_init_bounded_number LLsel_SD;
  param_init_bounded_number OTsel_full;
  param_init_bounded_number OTsel_SDR;
  param_init_bounded_number OTsel_SDL;
  param_init_bounded_number rho;
  param_init_bounded_number cvgrow;
  param_init_number ptdev;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value ofv;
  param_stddev_number tdev;
  param_number ro;
  param_number cr;
  param_number rbar;
  param_number fbar;
  param_number so;
  param_number beta;
  param_number RVq;
  param_number HSq;
  param_number fmsy;
  param_number msy;
  param_number bmsy;
  param_number sig;
  param_number tau;
  param_vector HSM_va;
  param_vector HSF_va;
  param_vector RV_va;
  param_vector LLM_va;
  param_vector LLF_va;
  param_vector OT_va;
  param_vector LLM_ft;
  param_vector LLF_ft;
  param_vector OT_ft;
  param_vector M_bt;
  param_vector F_bt;
  param_vector LLF_ct_hat;
  param_vector LLM_ct_hat;
  param_vector OT_ct_hat;
  param_vector LLF_ct_resid;
  param_vector LLM_ct_resid;
  param_vector OT_ct_resid;
  param_vector RV_resid;
  param_vector HS_resid;
  param_vector rt;
  param_vector rt_resid;
  param_vector HS_pred;
  param_vector RV_pred;
  param_vector lbins;
  param_matrix M_Nat;
  param_matrix F_Nat;
  param_matrix M_Fat;
  param_matrix F_Fat;
  param_matrix OT_Fat;
  param_matrix M_Zat;
  param_matrix F_Zat;
  param_matrix F_alk;
  param_matrix M_alk;
  param_matrix RV_plhat;
  param_matrix HSM_plhat;
  param_matrix HSF_plhat;
  param_matrix OT_plhat;
  param_matrix LLM_plhat;
  param_matrix LLF_plhat;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void initialization(void);
  void statedynamics(void);
  void observation_model(void);
  void stock_recruit_model(void);
  void objective_function(void);
 dvar_vector sel_dhn(const int& minage, const int& maxage, dvariable& full, dvariable& varR, dvariable& varL);
  void mcmc_output(void);
  void forecast(void);
  void run_data_simulation(void);

};
#endif
